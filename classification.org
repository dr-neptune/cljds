#+TITLE: Chapter 4 : Classification

#+BEGIN_SRC clojure
;; start viz server
(oz/start-server!)
#+END_SRC

* Inspecting the Data

#+BEGIN_SRC clojure
(defn csv->df
  ([csv-path]
  (-> (with-open [reader (io/reader csv-path)]
        (doall
         (csv/read-csv reader)))
      csv-data->maps
      (df/dataset)))
  ([csv-path delim]
   (-> (with-open [reader (io/reader csv-path)]
         (doall
          (csv/read-csv reader :separator delim)))
       csv-data->maps
       ;; (df/dataset)
       )))

(def titanic (csv->df "data/titanic.tsv" \tab))

(take 3 titanic)

(map :pclass titanic)

(map #(/ (map :fare %) (reduce + (map :fare %))) titanic)

(->> (map #(:fare %) titanic)
     (map double))

(map read-string (map #(:fare %) titanic))

(def strangs (map #(:fare %) titanic))

(map #(Double/parseDouble %) strangs)

(def strangs (list "1.22" "2.22 3.33"))

(type (map #(:fare %) titanic))

(apply read-string strangs)

(map read-string strangs)
#+END_SRC

We can construct a frequency table, showing how the counts of passengers in each of the groups

#+BEGIN_SRC clojure
(-> titanic
    (df/group-by [:sex :survived])
    (df/aggregate {:N df/row-count}))

(defn tally
  ([data group-cols]
   (-> data
       (df/group-by group-cols)
       (df/aggregate {:n df/row-count}))))

(df/map-columns frequency-table 
                :propn
                (df/column-names frequency-table #{:int64 :float64} :datatype)
                (fn [& rows]
                  (/ (rows) 
                     (reduce + rows))))

(tally titanic [:sex :survived])

(def frequency-table (tally titanic [:sex :survived]))
#+END_SRC

* Comparison with Relative Risk and Odds

#+BEGIN_SRC clojure
;; convert the dataset into a series of nested maps
(defn frequency-map
  [sum-column group-cols dataset]
  (let [f (fn [freq-map row]
            (let [groups (map row group-cols)]
              (->> (get row sum-column)
                   (assoc-in freq-map groups))))]
    (->> (frequency-table sum-column group-cols dataset)
         (:rows)
         (reduce f {}))))

(->> titanic
     (frequency-map :count [:sex :survived]))
#+END_SRC

