#+TITLE: Oz Data Visualization with Vega+Vega-lite

* Starting

#+BEGIN_SRC clojure
(require '[oz/core :as oz])
(oz/start-server!)
#+END_SRC

* Generate some data

#+BEGIN_SRC clojure
(def cow-data
  (for [i (range 100)]
    {:bools (gen/boolean)
     :cows (gen/one-of "brown cow" "blue cow" "green cow" "purple cow" "orange cow")
     :happiness (+ 1 (mod (gen/int) 10))
     :fullness (format "%.2f" (gen/double))
     :leaves (format "%.2f" (* 1000 (gen/double)))
     :grass (format "%.2f" (* 888 (gen/double)))
     :days (gen/one-of 1 2 3 4 5 6 7 8 9 10)
     :date (gen/date)}))

(take 10 cow-data)
#+END_SRC

* Vega-Lite Documentation

These plots are the result of me trying to translate the plots [[https://vega.github.io/vega-lite/examples/][here]] into Oz.

** Bar Plots

#+BEGIN_SRC clojure
;; simple bar chart
(def simple-bar-chart
  {:data {:values cow-data}
   :mark "bar"
   :encoding {:x {:field "days"
                  :type "quantitative"
                  :axis {:labelAngle 0}}
              :y {:aggregate "sum"
                  :field "happiness"
                  :type "quantitative"}
              :color {:field "cows"}}})

(oz/view! simple-bar-chart)

;; responsive bar chart
(def responsive-bar-chart
  {:data {:values (play-data "brown cow" "white cow" "black cow" "blue cow" "gray cow")}
   :width 500
   :height 250
   :mark "bar"
   :title "Cow Plot"
   :encoding {:x {:field "item"
                  :title "Type of Happy Cow"}
              :y {:aggregate "count"
                  :field "quantity"
                  :type "quantitative"
                  :title "Number of Happy Cows"}
              :color {:field "item"
                      :type "nominal"}}})

(oz/view! responsive-bar-chart)

;; aggregate bar chart
(def aggregate-bar-chart
  {:data {:values (play-data "brown cow" "white cow" "black cow" "blue cow" "gray cow")}
   :description "This a bar chart that is showing how happy the cows are today"
   :height {:step 17}
   ;; :transform [{:filter "quantity > 2"}]
   :mark "bar"
   :encoding {:y {:field "item"}
              :x {:aggregate "sum"
                  :field "happiness"
                  :title "Sum of Cow Happiness"}
              :color {:field "item"
                      :type "nominal"}}})

(oz/view! aggregate-bar-chart)

;; grouped bar chart
(def grouped-bar-chart
  {:data {:values cow-data}
   :description "This is a grouped bar chart"
   :height 200
   ;; :width 400
   :mark "bar"
   :encoding {:column {:field "time"
                       :type "ordinal"
                       :spacing 10}
              :y {:aggregate "sum"
                  :field "happiness"
                  :title "Cow Happiness"
                  :axis {:grid false}}
              :x {:field "gender"
                  :axis {:title ""}}
              :color {:field "gender"
                      :scale {:range ["#675193" "#ca8861"]}}}
   :config {:view {:stroke "transparent"}
            :axis {:domainWidth 1}}})

(oz/view! grouped-bar-chart)


;; stacked bar chart
(def stacked-bar-chart
  {:data {:values cow-data}
   :mark "bar"
   :encoding {:x {;; :timeUnit 24
                  :field "time"
                  :type "ordinal"
                  :title "Month"}
              :y {:aggregate "sum"
                  :field "happiness"
                  :type "p"}
              :color {:field "item"
                      :type "nominal"
                      :title "Cow Type"}}})

(oz/view! stacked-bar-chart)

;; stacked bar chart with rounded corners
(def stacked-bar-chart-rounded-corners
  {:data {:values cow-data}
   :mark {:type "bar"
          :cornerRadiusTopLeft 3
          :cornerRadiusTopRight 3}
   :encoding {:x {:field "time"
                  :type "ordinal"
                  :title "Month"}
              :y {:aggregate "sum"
                  :field "happiness"}
              :color {:field "item"}}})

(oz/view! stacked-bar-chart-rounded-corners)

(def horizontal-stacked-bar-chart
  {:data {:values cow-data}
   :mark "bar"
   :encoding {:x {:aggregate "sum"
                  :field "happiness"}
              :y {:field "item"}
              :color {:field "item"}}})

(oz/view! horizontal-stacked-bar-chart)

;; view data
(take 4 cow-data)

(def cow-data (take 100 (play-data "brown cow"
                                   "blue cow"
                                   "red cow"
                                   "moo cow")))
#+END_SRC

*** Interactive Bar Plots

#+BEGIN_SRC clojure
;; interactive bar chart with highlight hovering and selection on click
(def interactive-bar-chart
  {:data {:values (play-data "brown cow" "white cow" "black cow" "blue cow" "gray cow")}
   :description "A bar chart with highlighting on hover and selection on click"
   :width 500
   :height 500
   :selection {:highlight {:type "single"
                           :empty "none"
                           :on "mouseover"}
               :select {:type "multi"}}
   :mark {:type "bar"
          :fill "#4C78A8"
          :stroke "black"
          :cursor "pointer"}
   :encoding {:x {:field "item"
                  :type "nominal"}
              :y {:field "happiness"
                  :type "quantitative"
                  :aggregate "sum"}
              :fillOpacity {:condition {:selection "select"
                                        :value 1}
                            :value 0.5}
              :value 0
              }
   :config {:scale {:bandPaddingInner 0.2}}})

(oz/view! interactive-bar-chart)

;; interactive average
(def interactive-average-chart
  {:data {:values (play-data "brown cow" "white cow" "black cow" "blue cow" "gray cow")}
   :layer [{:selection {:brush {:type "interval"
                                :encodings ["x"]}}
            :mark "bar"
            :encoding {:x {;; :timeUnit ""
                           :field "time"
                           :type "ordinal"}
                       :y {:aggregate "mean"
                           :field "happiness"
                           :type "quantitative"}
                       :opacity {:condition {:selection "brush"
                                             :value 1}
                                 :value 0.7}}}
           {:transform [{:filter {:selection "brush"}}]
            :mark "rule"
            :encoding {:y {:aggregate "mean"
                           :field "happiness"
                           :type "quantitative"}
                       :color {:value "firebrick"}
                       :size {:value 3}}}]})

(oz/view! interactive-average-chart)
#+END_SRC

** Histograms

#+BEGIN_SRC clojure
(take 5 cow-data)

;; histogram
(def hist
  {:data {:values cow-data}
   :mark "bar"
   :height 500
   :width 700
   :encoding {:x {:bin {:binned true
                        :step 1}
                  :field "happiness"
                  :type "quantitative"}
              :y {:aggregate "count"}
              :color {:field "cows"}}})

(oz/view! hist)

;; log scaled histogram
(def lshist
  {:data {:values cow-data}
   ;; :transform [{:calculate "log(datum.x)/log(10)", :as "log_x"}
   ;;             {:bin "true"
   ;;              :field "log_x"
   ;;              :as "bin_log_x"}]
   :mark "bar"
   :encoding {:x {:field "happiness"
                  :scale {:type "log"
                          :base 10}
                  :axis {:tickCount 10}}
              :y {:aggregate "count"}}})

(oz/view! lshist)

;; stacked density estimates
(def sdens
  {:data {:values cow-data}
   :width 500
   :height 400
   :mark "area"
   :transform [{:density "leaves"
                :groupby ["cows"]
                :extent [0 1000]}]
   :encoding {:x {:field "value"
                  :type "quantitative"
                  :title "Amount of Leaves Eaten (kg)"}
              :y {:field "density"
                  :type "quantitative"
                  :stack "zero"}
              :color {:field "cows"
                      :type "nominal"
                      :scale {:scheme "pastel1"}}}})

(oz/view! sdens)

;; 2d histogram heatmap
(def hmap
  {:data {:values cow-data}
   :transform [{:filter {:and [{:field "grass" :valid true}
                               {:field "leaves" :valid true}]}}]
   :mark "rect"
   :width 500
   :height 500
   :encoding {:x {:bin {:maxbins 10}
                  :field "grass"
                  :type "quantitative"}
              :y {:bin {:maxbins 10}
                  :field "leaves"
                  :type "quantitative"}
              :color {:aggregate "count"
                      :type "quantitative"}}
   :config {:view {:stroke "transparent"}}})

(oz/view! hmap)

;; layered histogram and cumulative histogram
(def lchist
  {:data {:values cow-data}
   :width 500
   :height 400
   :title "Moo-ve Over"
   :transform [{:bin true
                :field "happiness"
                :as "bin_happiness"}
               {:aggregate [{:op "count" :as "count"}]
                :groupby ["bin_happiness" "bin_happiness_end"]}
               {:field "datum.bin_happiness !== null"}
               {:sort [{:field "bin_happiness"}]
                :window [{:op "sum"
                          :field "count"
                          :as "Cumulative Count"}]
                :frame [nil, 0]}]
   :encoding {:x {:field "bin_happiness"
                  :type "quantitative"
                  :scale {:zero false}
                  :title "Happiness"}
              :x2 {:field "bin_happiness_end"}}
   :layer [{:mark "bar"
            :encoding {:y {:field "Cumulative Count"
                           :type "quantitative"}}}
           {:mark {:type "bar"
                   :color "yellow"
                   :opacity 0.5}
            :encoding {:y {:field "count"
                           :type "quantitative"}}}]})

(oz/view! lchist)
#+END_SRC


* Viewing

  The main function for displaying vega or vega-lite is oz/view!

#+BEGIN_SRC clojure
(def line-plot
  {:data {:values (play-data "monkey" "slipper" "broom")}
   :encoding {:x {:field "time"
                  :type "quantitative"}
              :y {:field "quantity"
                  :type "quantitative"}
              :color {:field "item"
                      :type "nominal"}}
   :mark "line"})

(oz/view! line-plot)

(def stacked-bar
  {:data {:values (play-data "munchkin" "witch" "dog" "lion" "tiger" "bear")}
   :mark "bar"
   :encoding {:x {:field "time"
                  :type "ordinal"}
              :y {:aggregate "sum"
                  :field "quantity"
                  :type "quantitative"}
              :color {:field "item"
                      :type "nominal"}}})

(oz/view! stacked-bar)


#+END_SRC


* Vega Support

  For vega instead of vega lite we could specify :mode :vega to oz/view!

#+BEGIN_SRC clojure
(require '[cheshire.core :as json])

(def contour-plot
  (oz/load "https://raw.githubusercontent.com/metasoarous/oz/master/resources/oz/examples/vega/contour-lines.vega.json"))

(oz/view! contour-plot :mode :vega)
#+END_SRC

* Hiccup

We can also embed vega-lite and vega visualizations within hiccup documents
  
#+BEGIN_SRC clojure
(def viz
  [:div
   [:h1 "Look ye and behold"]
   [:p "A couple of small charts"]
   [:div {:style {:display "flex" :flex-direction "row"}}
    [:vega-lite line-plot]
    [:vega-lite stacked-bar]]
   [:p "A wider, more expansive chart"]
   [:vega contour-plot]
   [:h2 "If ever, oh ever there was, the vizard of oz is one because, because, because..."]
   [:p "Because of the wonderful things it does"]])

(oz/view! viz)
#+END_SRC

* Export

  We can also export static html files using Vega-Embed to render interactive vega/vega-lite visualizations

#+BEGIN_SRC clojure
(oz/export! viz "test.html")
#+END_SRC

* Live Code Reloading

  Oz features figwheel like hot code reloading

#+BEGIN_SRC clojure
(oz/live-reload! "example-viz.clj")
#+END_SRC

#+BEGIN_SRC clojure :tangle example-viz.clj
;; here is an example string
(require '[oz/core :as oz])

(def viz
  [:div
   [:h1 "Look ye and behold"]
   [:p "A couple of small charts"]
   [:div {:style {:display "flex" :flex-direction "row"}}
    [:vega-lite line-plot]
    [:vega-lite stacked-bar]]
   [:p "A wider, more expansive chart"]
   [:vega contour-plot]
   [:h2 "If ever, oh ever there was, the vizard of oz is one because, because, because..."]
   [:p "Because of the wonderful things it does"]])

(oz/live-view! viz)
#+END_SRC
